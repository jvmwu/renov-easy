version: '3.8'

# ============================================
# Docker Compose Configuration for Production
# ============================================
# Use this file explicitly for production deployments:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# ============================================

services:
  # ============================================
  # MySQL Production Configuration
  # ============================================
  mysql:
    # Use specific version for stability
    image: mysql:8.0.35
    restart: always
    environment:
      # Strong passwords from environment/secrets
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # Don't expose ports to host in production
    ports: []
    volumes:
      # Only data volume, no direct migration mounts
      - mysql_data:/var/lib/mysql
      # Backup volume
      - mysql_backup:/backup
    # Production-optimized configuration
    command: |
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=200
      --max_allowed_packet=64M
      --innodb_buffer_pool_size=256M
      --innodb_log_file_size=64M
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # ============================================
  # Redis Production Configuration
  # ============================================
  redis:
    # Use specific version for stability
    image: redis:7.2-alpine
    restart: always
    # Redis with password and persistence
    command: |
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300
    # Don't expose ports to host in production
    ports: []
    volumes:
      - redis_data:/data
      - redis_backup:/backup
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ============================================
  # Backend Production Configuration
  # ============================================
  backend:
    # Always pull the latest image
    image: renoveasy-backend:${IMAGE_TAG:-latest}
    restart: always
    environment:
      # Production environment
      ENVIRONMENT: production
      
      # Production logging
      RUST_LOG: warn,renoveasy=info
      LOG_LEVEL: info
      LOG_SQL_QUERIES: "false"
      
      # Security
      ENFORCE_HTTPS: "true"
      SECURITY_HEADERS_ENABLED: "true"
      CSP_ENABLED: "true"
      
      # Rate limiting
      RATE_LIMIT_ENABLED: "true"
      
      # Disable development features
      SWAGGER_ENABLED: "false"
      DEBUG_ENDPOINTS_ENABLED: "false"
      
      # Production features
      METRICS_ENABLED: "true"
      METRICS_PORT: 9090
      
      # Monitoring (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-}
    ports:
      # Only expose through reverse proxy
      - "127.0.0.1:8080:8080"
    volumes:
      # Minimal volume mounts for production
      - ./i18n:/app/i18n:ro
      - logs:/app/logs
    # Production health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    # Resource limits
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 512M
        reservations:
          cpus: '1'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ============================================
  # Nginx Reverse Proxy (Production)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: renoveasy-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - renoveasy-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # ============================================
  # Backup Service (Production)
  # ============================================
  backup:
    image: alpine:latest
    container_name: renoveasy-backup
    restart: unless-stopped
    volumes:
      - mysql_backup:/mysql_backup
      - redis_backup:/redis_backup
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BACKUP_RETENTION_DAYS: 30
    # Run backup daily at 2 AM
    command: |
      sh -c "
        apk add --no-cache mysql-client redis bash
        echo '0 2 * * * /backup.sh' | crontab -
        crond -f
      "
    networks:
      - renoveasy-network
    profiles:
      - backup

# ============================================
# Production Volumes
# ============================================
volumes:
  mysql_backup:
    driver: local
    name: renoveasy-mysql-backup
  redis_backup:
    driver: local
    name: renoveasy-redis-backup
  nginx_cache:
    driver: local
    name: renoveasy-nginx-cache
  nginx_logs:
    driver: local
    name: renoveasy-nginx-logs
  logs:
    driver: local
    name: renoveasy-app-logs

# ============================================
# Production Deployment:
# ============================================
# Deploy production stack:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# Deploy with specific image:
#   IMAGE_TAG=v1.0.0 docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# Enable backups:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml --profile backup up -d
#
# Scale backend:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale backend=3
#
# View logs:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs -f backend
#
# Backup database manually:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec mysql mysqldump -u root -p renoveasy > backup.sql